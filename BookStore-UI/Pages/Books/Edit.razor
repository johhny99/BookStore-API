@page "/books/edit/{Id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IBookRepository _repo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager

<h3>Edit Book</h3>
<hr />
<br />
@if (!isSussess)
{
    <ErrorMessage Message="Something went wrong with the edit operation" />
}
@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again" />
}
else if (Model == null)
{
    <LoadingMessage Message="Loading Book Details" />
}
else
{
    <EditForm Model="Model" OnValidSubmit="HandleUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Book Title</label>
            <InputText @bind-Value="Model.Title" class="form-control" id="title" />
        </div>
        <div class="form-group">
            <label for="isbn">Book ISBN</label>
            <InputText @bind-Value="Model.Isbn" class="form-control" id="isbn" />
        </div>
        <div class="form-group">
            <label for="Price">Book Price</label>
            <InputNumber @bind-Value="Model.Price" class="form-control" id="Price" />
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <select @bind="Model.AuthorId" class="form-control" id="author">
                <option value="">--Select Author--</option>
                @if (authors != null)
                {
                    foreach (var author in authors)
                    {
                        <option value="@author.Id">@author.Firstname @author.Lastname</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="summary">Summary</label>
            <InputTextArea @bind-Value="Model.Summary" class="form-control" id="summary" />
        </div>
        <div class="form-group">
            <label for="bookcover">Book Cover Photo</label>
            <InputFile OnChange="HanldeFileSelection" />
            @if (isInvalidFileType)
            {
                <ErrorMessage Message="Please remove the invalid file and select a new image, or leave this field blank" />
            }
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px;width:100px" />
            }
            else if (!string.IsNullOrWhiteSpace(Model.Image))
            {
                <img src="@Model.Image" style="height:100px;width:100px" />
            }
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Submit Changes
        </button>
        <button class="btn btn-outline-primary" @onclick="BackToList">
            <span class="oi oi-media-skip-backward"></span>
            Back to lists
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Book Model = new Book();
    private IList<Author> authors;
    private IBrowserFile file;
    bool isSussess = true;
    bool isInvalidFileType = false;
    bool isFileChanged = false;
    private string imageDataURL;
    private Stream msFile;

    protected async override Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await _repo.Get(Endpoints.BooksEndpoint, id);
        authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);
    }
    private async Task HanldeFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;
        if (file != null)
        {
            var name = file.Name;
            if (name.Contains("jpg") || name.Contains("png") || name.Contains("jpeg"))
            {
                msFile = file.OpenReadStream();

                var resizedImgFile = await file.RequestImageFileAsync("image/png", 100, 100);
                var buffer = new byte[resizedImgFile.Size];
                await resizedImgFile.OpenReadStream().ReadAsync(buffer);
                var imageBase64Data = Convert.ToBase64String(buffer);
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }
    private async Task HandleUpdate()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";
                _fileUpload.RemoveFile(Model.Image);
                //await _fileUpload.UploadFile(file, picName);
                await _fileUpload.UploadFile(msFile, picName);

                Model.Image = picName;
            }
            else if (isFileChanged && file == null)
            {
                _fileUpload.RemoveFile(Model.Image);
                Model.Image = string.Empty;
            }


            isSussess = await _repo.Update(Endpoints.BooksEndpoint, Model, Model.Id);
            if (isSussess)
            {
                BackToList();
            }
        }

    }
    private void BackToList()
    {
        _navManager.NavigateTo("/books/");
    }
}
