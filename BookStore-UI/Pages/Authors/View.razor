@page "/authors/view/{Id}"

@inject IAuthorRepository _repo
@inject NavigationManager _navManager

<h3 class="card-title">View Author's Detail</h3>
<hr/>
<br/>
@if (Model == null)
{
    <LoadingMessage Message="Loading Author Details......"/>
}
else
{
<div class="col-md-4">
    <h4>Author details</h4>
    <table class="table table-responsive">
        <tr>
            <td>First name:</td>
            <td>@Model.Firstname</td>
        </tr>
        <tr>
            <td>Last name:</td>
            <td>@Model.Lastname</td>
        </tr>
        <tr>
            <td>Biography:</td>
            <td>@Model.Bio</td>
        </tr>
    </table>
    <br/>
    @if (Model.Books == null|| Model.Books.Count<1)
    {
        <div class="alert alert-dismissible alert-secondary">
            No book for this author
        </div>
    }
    else
    {
        <div class="card" style="width: 18rem;">
            <div class="card-header">
                <h4>Author's Books</h4>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var book in Model.Books)
                {
                    <li class="list-group-item">@book.Title - @book.Price</li>
                }
            </ul>
        </div>
    }

</div>
}

<button class="btn btn-outline-primary" @onclick="BackToList">
    <span class="oi oi-media-skip-backward"></span>
    Back to lists
</button>

@code {
    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();

    protected async override Task OnInitializedAsync()
    {
        int id = int.Parse(Id);
        Model = await _repo.Get(Endpoints.AuthorsEndpoint, id);
    }
    private void BackToList()
    {
        _navManager.NavigateTo("authors/");
    }
}
